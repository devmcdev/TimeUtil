@using Microsoft.AspNetCore.Components.Forms
@using TimeUtil.Components.EventsTable
@using TimeUtil.Shared
@using TimeUtil.Shared.Interfaces
@using TimeUtil.Components.TimeUntilCalculator

@inject ISnackbar Snackbar
@inject IOutlookCalendarCSVParseService Parser
@inject IDialogService DialogService

@implements IDisposable

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-3">
            @if (cal is null)
            {
                <InputForm OnSubmit="@HandleSubmit" />
            }
            else
            {
                <StyledText HtmlTag="p" Typo="Typo.subtitle1">
                    File: <strong>@_file!.Name</strong> is currently being displayed
                    <MudButton Variant="Variant.Filled"
                           Color="Color.Info"
                           StartIcon="@Icons.Material.Filled.RestartAlt"
                           Class="ml-2"
                           Size="Size.Small"
                           OnClick="Reset">
                        Reset
                    </MudButton>
                </StyledText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        @if (processing)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        }
        else if (cal is not null)
        {
            <MudStack Spacing="6">
                <MudPaper Class="pa-3">
                    <TimeUntilCalculatorView Calendar="cal" />
                </MudPaper>
                <div>
                    <DataOutputView EditEvent="OpenEditDialog" EditManyEvents="OpenEditiManyEventsDialog" Calendar="@cal" @bind-SelectedEvents="SelectedEvents" />
                </div>
            </MudStack>
        }
    </MudItem>
</MudGrid>

@code {
    private OutlookCalendar? cal;
    private bool processing;
    private IBrowserFile? _file;
    private HashSet<Event> _selectedEvents = new();

    private IReadOnlySet<Event> SelectedEvents
    {
        get => _selectedEvents;
        set
        {
            if (value is HashSet<Event> eventHashSet)
            {
                _selectedEvents = eventHashSet;
            }
            else
            {
                _selectedEvents = new(value);
            }
        }
    }

    private async Task HandleSubmit(InputFormSubmitArgs input)
    {
        if (_file != input.File)
        {
            try
            {
                _file = input.File;
                processing = true;
                await using Stream stream = input.File.OpenReadStream(input.File.Size);
                using StreamContent streamContent = new(stream);
                cal = await Parser.ParseOutlookCalendar(await streamContent.ReadAsStreamAsync());
            }
            catch (Exception e)
            {
                Console.WriteLine($"{e.GetType().Name} message: {e.Message}");
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
                Snackbar.Add($"There was an error when processing the CSV file. Please try a differnt file {e.GetType().Name} message: {e.Message}", Severity.Error);
                Reset();
            }
            finally
            {
                processing = false;
            }
        }
    }

    private void Reset()
    {
        CleanCalendar();
        _file = null;
    }

    private void CleanCalendar()
    {
        if (cal is not null)
        {
            cal = null;
        }
    }

    private async Task OpenEditDialog(Event eventToUpdate)
    {
        DialogParameters parameters = new()
        {
            { nameof(EditEventDialog.Event), eventToUpdate },
            { nameof(EditEventDialog.Categories), cal?.Categories }
        };

        var reference = DialogService.Show<EditEventDialog>("Simple Dialog", parameters);

        var res = await reference.Result;

        if (res.TryGetSuccessfulResult(out IEnumerable<string>? categories))
        {
            EventUpdate eventUpdate = new(eventToUpdate, categories.ToArray());
            cal?.UpdateEvent(eventUpdate);
        }
    }

    private async Task OpenEditiManyEventsDialog()
    {
        DialogParameters parameters = new()
        {
            { nameof(EditManyEventsDialog.Events), SelectedEvents },
            { nameof(EditManyEventsDialog.Categories), cal?.Categories }
        };

        var reference = DialogService.Show<EditManyEventsDialog>("Simple Dialog", parameters);

        var res = await reference.Result;

        if (res.TryGetSuccessfulResult(out MultiEditResult? result))
        {
            EventUpdate[] eventUpdates = new EventUpdate[SelectedEvents.Count];

            int index = 0;
            foreach (Event @event in SelectedEvents)
            {
                HashSet<string> newCates = new(@event.Categories.Except(result.CategoiesToRemove));

                foreach (string category in result.CategoiesToAdd)
                {
                    newCates.Add(category);
                }

                EventUpdate eventUpdate = new(@event, newCates.ToArray());
                eventUpdates[index] = eventUpdate;

                index++;
            }

            cal?.UpdateManyEvents(eventUpdates);

            // Remove old events after new edited ones are created to replace the ones edited.
            // If not remove out of bonds exception and memory link possible.
            _selectedEvents.Clear();
        }
    }


    public void Dispose()
    {
        CleanCalendar();
    }
}