@using TimeUtil.Shared
@inject IDialogService DialogService

<div class="d-flex flex-row justify-space-between">
    <StyledText HtmlTag="h1" Typo="Typo.h6">
        Time Utilisation Calculator
    </StyledText>
    <MudIconButton Size="@Size.Small" Icon="@Icons.Filled.Help" Title="Help for Time utilisation calcultor" OnClick="@OpenHelpDialog" />
</div>

<MudGrid Spacing="2">
    <MudItem xs="12" sm="6" lg="4">
        <MonthRangePicker @bind-MonthRange="MonthRange" StartDate="Calendar.FirstEventDate" EndDate="Calendar.LastEventDate" />
    </MudItem>
    <MudItem xs="12" sm="6" lg="4">
        <CategoryMultiSelect @bind-SelectedCategories="SelectedCategories" Categories="Calendar.Categories" HelpText="Select categoires to be included in the calculation" TextFunc="TextHelpers.GetMultiSelectionText" />
    </MudItem>
    <MudItem xs="12" sm="6" lg="2">
        <MudNumericField @bind-Value="TargetHours" Label="Target Hours per month" Format="F2" Variant="Variant.Text" Min="0" />
    </MudItem>
    <MudItem xs="12" sm="6" lg="2">
        <MudField Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Percent" Label="Time Utilisation">@Math.Round(OutlookCalendar.TimeUtilisationPercentage(_targetHours * GetNumMonths(), _events), 2)</MudField>
    </MudItem>
</MudGrid>

@code {
    [Parameter, EditorRequired] public OutlookCalendar Calendar { get; set; } = default!;

    private OutlookCalendar? _calendar;
    private IEnumerable<string> _selectedCategories = Enumerable.Empty<string>();
    private MonthRange? _monthRange;
    private Event[] _events = Array.Empty<Event>();
    private double _targetHours = 120;

    private double TargetHours
    {
        get => _targetHours;
        set
        {
            _targetHours = value;
            CalcEventsList();
        }
    }

    private MonthRange? MonthRange
    {
        get => _monthRange;
        set
        {
            _monthRange = value;
            CalcEventsList();
        }
    }

    private IEnumerable<string> SelectedCategories
    {
        get => _selectedCategories;
        set
        {
            _selectedCategories = value;
            CalcEventsList();
        }
    }

    protected override void OnParametersSet()
    {
        ThrowHelpers.ThrowIfRequiredPrameterNull(Calendar);

        if (_calendar != Calendar)
        {
            _selectedCategories = Enumerable.Empty<string>();
            _calendar = Calendar;
            _monthRange = null;
        }

        CalcEventsList();
    }

    private void CalcEventsList()
    {
        _events = Calendar.FilterEvents(_selectedCategories, _monthRange?.StartMonth, _monthRange?.EndMonth).ToArray();
    }

    private int GetNumMonths()
    {
        DateTime startDate = MonthRange?.StartMonth?.ToDateTime(TimeOnly.MinValue) ?? Calendar.FirstEventDate.GetFirstDayOfMonth();
        DateTime endDate = MonthRange?.EndMonth?.ToDateTime(TimeOnly.MinValue) ?? Calendar.LastEventDate.GetLastDayOfMonth();

        return (((endDate.Year - startDate.Year) * 12) + endDate.Month - startDate.Month) + 1;
    }

    private void OpenHelpDialog()
    {
        DialogService.Show<TimeUtilCalculatorHelpDialog>("Help");
    }
}
