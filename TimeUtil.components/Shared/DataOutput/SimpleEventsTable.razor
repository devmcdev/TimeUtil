@using TimeUtil.Shared

<MudSimpleTable Hover="true" Striped="true" Dense="true" Elevation="0" Outlined="true">
    <thead>
        <tr>
            <th>
                Event Subject
            </th>
            <th>
                Start Date
            </th>
            <th>
                End Date
            </th>
            <th>
                Event duration
            </th>
            <th>
                Event Categories
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var row in _events)
        {
            <tr @key="row">
                <td>
                    @row.EventSubject
                </td>
                <td>
                    @row.FullStartDateTime
                </td>
                <td>
                    @row.FullEndDateTime
                </td>
                <td>
                    @row.Eventduration
                </td>
                <td>
                    <ul>
                        @foreach (string category in row.Categories)
                        {
                            <li @key="category">
                                @category
                            </li>
                        }
                    </ul>
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>
<MudStack Justify="Justify.FlexEnd" Row="true" Class="mt-3">
    <div class="d-flex flex-row">
        <MudSelect T="int" Label="Rows per page" FullWidth="false" @bind-Value="PageSize">
            @foreach (int option in pageSizeOptions)
            {
                <MudSelectItem Value="@option" />
            }
        </MudSelect>
        <MudPagination @bind-Selected="CurrentPage" Count="_numberOfPages" BoundaryCount="0" Class="pa-4" ShowFirstButton="true" ShowLastButton="true" MiddleCount="0" />
    </div>
</MudStack>


@code {
    [Parameter, EditorRequired] public EventsTableData Events { get; set; } = default!;

    private Event[] _events = default!;
    private static readonly int[] pageSizeOptions = new[] { 20, 40, 60, 80, 100 };
    private int _pageSize = pageSizeOptions[0];
    private int _numberOfPages;

    private int _currentPage = 1;

    private int PageSize
    {
        get => _pageSize;
        set
        {
            _pageSize = value;
            _numberOfPages = GetNumberOfPages();
            _events = GetPageOfEvents();
        }
    }

    private int CurrentPage
    {
        get => _currentPage;
        set
        {
            _currentPage = value;
            _events = GetPageOfEvents();
        }
    }

    protected override void OnParametersSet()
    {
        _events = GetPageOfEvents();
        _numberOfPages = GetNumberOfPages();
    }

    private int GetNumberOfPages()
    {
        return (int)Math.Ceiling((double)Events.Events.Count / _pageSize);
    }

    private Event[] GetPageOfEvents()
    {
        return Events.Events.Skip((_currentPage - 1) * _pageSize).Take(_pageSize).ToArray();
    }
}
