@using TimeUtil.Shared

<MudTable AllowUnsorted="false" Striped="true" Dense="true" Items="@Events.Events" Hover="true" Breakpoint="Breakpoint.Sm" Filter="FilterEvents" Elevation="0" @bind-RowsPerPage="@pageSize">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="@eventSubjectSort">
                Event Subject
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                               SortBy="@startDateSort">
                Start Date
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="@endDateSort">
                End Date
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="@eventDurationSort">
                Event duration
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Event Categories</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Event Subject">@context.EventSubject</MudTd>
        <MudTd DataLabel="Start Date">@context.FullStartDateTime</MudTd>
        <MudTd DataLabel="End Date">@context.FullEndDateTime</MudTd>
        <MudTd DataLabel="Event duration">@context.Eventduration</MudTd>
        <MudTd DataLabel="Event Categories">
            <ul>
                @foreach (string category in context.Categories)
                {
                    <li @key="category">
                        @category
                    </li>
                }
            </ul>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="@pageSizeOptions" />
    </PagerContent>
</MudTable>

@code {
    [Parameter, EditorRequired] public EventsTableData Events { get; set; } = default!;
    [Parameter] public string? EventSubjectFilter { get; set; }

    private static readonly Func<Event, object?> eventSubjectSort = new(static x => x.EventSubject);
    private static readonly Func<Event, object> startDateSort = new(static x => x.FullStartDateTime);
    private static readonly Func<Event, object> endDateSort = new(static x => x.FullEndDateTime);
    private static readonly Func<Event, object> eventDurationSort = new(static x => x.Eventduration);
    private static readonly int[] pageSizeOptions = new[] { 20, 40, 60, 80, 100 };

    private EventsTableData? _prevEvents;
    private int pageSize = pageSizeOptions[0];

    private bool FilterEvents(Event calEvent)
    {
        if (string.IsNullOrWhiteSpace(EventSubjectFilter))
        {
            return true;
        }
        if (calEvent.EventSubject?.Contains(EventSubjectFilter, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }

        return false;
    }

    protected override void OnParametersSet()
    {
        ThrowHelpers.ThrowIfRequiredPrameterNull(Events);
    }
}
