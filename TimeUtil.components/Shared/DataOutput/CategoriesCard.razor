<MudCard>
    <MudList>
        <MudListSubheader>
            Filter by Category
        </MudListSubheader>
        <MudListItem>
            <div class="button-wrapper">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="CheckAll">
                    Check all
                </MudButton>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Secondary"
                           Size="Size.Small"
                           OnClick="UnCheckAll">
                    Uncheck all
                </MudButton>
            </div>

        </MudListItem>

        <CheckboxList Items="@Categories" @bind-CheckedItems="BoundCategories" />
    </MudList>

</MudCard>

@code {
    [Parameter, EditorRequired] public IEnumerable<string> Categories { get; set; } = default!;

    [Parameter] public List<string> FilterCategories { get; set; } = default!;
    [Parameter] public EventCallback<List<string>> FilterCategoriesChanged { get; set; }

    private List<string> BoundCategories
    {
        get => FilterCategories ?? new();
        set => FilterCategoriesChanged.InvokeAsync(FilterCategories);
    }

    private void CheckAll()
    {
        FilterCategories = Categories.ToList();
        FilterCategoriesChanged.InvokeAsync(FilterCategories);
    }

    private void UnCheckAll()
    {
        FilterCategories.Clear();
        FilterCategoriesChanged.InvokeAsync(FilterCategories);
    }

    protected override void OnParametersSet()
    {
        ThrowHelpers.ThrowIfRequiredPrameterNull(Categories, nameof(Categories));
        ThrowHelpers.ThrowIfRequiredPrameterNull(FilterCategories, nameof(FilterCategories));
    }
}

