@using TimeUtil.Shared

<MudBreakpointProvider>
    <MudGrid>
        <MudItem xs="12">
            <h1>Results</h1>
        </MudItem>
        <MudItem md="4" lg="3" xl="2">
            <MudGrid>
                <MudItem xs="12">
                    <CategoriesCard @bind-FilterCategories="@SelectedCategories" Categories="@calendar.Categories" />
                </MudItem>
                <MudItem xs="12">
                    <DateRangeCard OnStartDateChanged="StartDatechanged" OnEndDateChanged="EndDatechanged" />
                </MudItem>
                <MudHidden Breakpoint="Breakpoint.LgAndDown" Invert="true">
                    @*Total Hours Card*@
                    <MudItem xs="12">
                        <MudGrid>
                            <MudItem xs="12">
                                <TotalHoursCard Calendar="calendar" Events="events" />
                            </MudItem>
                            @*Time Until*@
                            <MudItem xs="12">
                                <TimeUntilCard Calendar="@calendar" DefaultTargetHours="DefaultTargetHours" Events="events" />
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudHidden>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" md="8" lg="9" xl="8">
            <MudCard>
                <EventsTable Events="@events" />
            </MudCard>
        </MudItem>
        <MudHidden Breakpoint="Breakpoint.Xl" Invert="true">
            <MudItem xl="2">
                <MudGrid>
                    @*Total Hours Card*@
                    <MudItem xs="12">
                        <TotalHoursCard Calendar="calendar" Events="events" />
                    </MudItem>
                    @*Time Until*@
                    <MudItem xs="12">
                        <TimeUntilCard Calendar="@calendar" DefaultTargetHours="DefaultTargetHours" Events="events" />
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudHidden>
    </MudGrid>
</MudBreakpointProvider>

@code {
    [Parameter, EditorRequired]
    public OutlookCalendar calendar { get; set; } = default!;

    private DateOnly? startDate = null;
    private DateOnly? endDate = null;

    private const double DefaultTargetHours = 120;

    private OutlookCalendar? _calendar;
    private IEnumerable<Event> events = Enumerable.Empty<Event>();

    private List<string> _selectedCategories = new();
    private List<string> SelectedCategories
    {
        get => _selectedCategories;
        set
        {
            _selectedCategories = value;
            CalcEventsList();
        }
    }

    private void CalcEventsList()
    {
        events = calendar.FilterEvents(_selectedCategories, startDate, endDate);

    }

    private void StartDatechanged(DateTime? dateTime)
    {
        if (dateTime.HasValue)
        {
            startDate = DateOnly.FromDateTime(dateTime.Value);
        }
        else
        {
            startDate = null;
        }

        CalcEventsList();

    }

    private void EndDatechanged(DateTime? dateTime)
    {
        if (dateTime.HasValue)
        {
            endDate = DateOnly.FromDateTime(dateTime.Value);
        }
        else
        {
            endDate = null;
        }

        CalcEventsList();
    }

    protected override void OnParametersSet()
    {
        ThrowHelpers.ThrowIfRequiredPrameterNull(calendar, nameof(calendar));
        if (_calendar != calendar)
        {
            _calendar = calendar;
            _selectedCategories = calendar.Categories.ToList();
            CalcEventsList();
        }
    }

}
