@using Microsoft.AspNetCore.Components.Forms
<MudCard Style="max-width: 500px;">
    <MudCardHeader>
        <MudText Typo="Typo.h4">Find out about your time</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudForm @bind-IsValid="@formValid">
            <div class="mb-3">
                <MudText Class="mb-2" Typo="Typo.h5">Upload a Outlook calendar CSV export</MudText>
                <InputFile id="fileInput" OnChange="UploadFile" hidden="hidden" />
                <MudButton Class="mb-2" HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Filled.CloudUpload"
                           for="fileInput">
                    Upload File
                </MudButton>
                @if (file is not null)
                {
                    <MudButton Variant="Variant.Filled"
                           Color="Color.Error"
                           StartIcon="@Icons.Filled.DeleteForever"
                           Class="ml-2 mb-2"
                           OnClick="RemoveFile">
                        Remove File
                    </MudButton>

                    <MudText>File called: <strong>@file.Name</strong> has been uploaded.</MudText>
                }
            </div>
            <div>
                <MudText Class="mb-2" Typo="Typo.h5">
                    Categories
                </MudText>
                <MudText Class="mb-2" Typo="Typo.subtitle1">
                    Add any categories that are to be counted towards Time.
                    If none are entered all events in the calender will be counted.
                </MudText>
                @for (int i = 0; i < categories.Count; i++)
                {
                    int j = i; // a local copy to solve the capture problem

                    <MudTextField @bind-Value="categories[j]"
                              Label="category"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Filled.DeleteForever"
                              OnAdornmentClick="()=> RemoveCategory(categories[j])"
                              Class="my-2" />
                }
                <MudButton Color="Color.Secondary"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Filled.Add"
                           OnClick="AddCategoryInput">
                    Add Categoriy
                </MudButton>
            </div>
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!formValid)" Class="ml-auto" OnClick="HandleSubmit">Submit</MudButton>
    </MudCardActions>
</MudCard>


@code {
    [Parameter, EditorRequired] public EventCallback<InputFormSubmitArgs> OnSubmit { get; set; }
    IBrowserFile? file;
    List<string?> categories = new();
    bool formValid;

    private void UploadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private void RemoveFile()
    {
        file = null;
    }

    private void AddCategoryInput()
    {
        categories.Add(string.Empty);
    }

    private void RemoveCategory(string? category)
    {
        categories.Remove(category);
    }

    private Task HandleSubmit()
    {
        if (file is not null)
        {
            InputFormSubmitArgs inputFormSubmitArgs = new(file, categories);

            return OnSubmit.InvokeAsync(inputFormSubmitArgs);
        }
        return Task.CompletedTask;
    }

}
