@using TimeUtil.Components.TimeUntilCalculator
@using TimeUtil.Shared
@using TimeUtil.Shared.Interfaces

@inject IOutlookCalendarCSVParseService Parse
@inject ISnackbar Snackbar
@inject IDialogService Dialog


<MudPaper Class="pa-3">
    <div class="d-flex flex-row justify-space-between">
        <StyledText HtmlTag="h1" Typo="Typo.h6">
            Edit Events
        </StyledText>
        <MudIconButton Size="@Size.Small" Icon="@Icons.Filled.Help" Title="Help for Time utilisation calcultor" OnClick="@OpenHelpDialog" />
    </div>

    <MudStack Spacing="5">
        <MudButton Style="width:fit-content;" Disabled="isExporting" Size="Size.Small" Variant="Variant.Filled" Color="Color.Info" OnClick="ExportCalendar" StartIcon="@Icons.Filled.Download" Class="mt-2">Export all Events</MudButton>
        <MudGrid Spacing="2">
            <MudItem xs="12" sm="6" lg="4">
                <MudTextField @bind-Value="@FilterString" Placeholder="Search Event Subject" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Clearable="true" />
            </MudItem>
            <MudItem xs="12" sm="6" lg="3">
                <CategoryMultiSelect @bind-SelectedCategories="SelectedCategories" Categories="Calendar.Categories" TextFunc="TextHelpers.GetMultiSelectionText" />
            </MudItem>
            <MudItem xs="12" sm="9" lg="3">
                <MonthRangePicker StartDate="@Calendar.FirstEventDate" EndDate="@Calendar.LastEventDate" @bind-MonthRange="@MonthRange" />
            </MudItem>
            <MudItem Class="align-self-end" xs="12" sm="3" lg="2">
                <MudSelect @bind-Value="DayState" T="AllDayState">
                    <MudSelectItem Value="AllDayState.Show">Show all day events</MudSelectItem>
                    <MudSelectItem Value="AllDayState.Hide">Hide all day events</MudSelectItem>
                    <MudSelectItem Value="AllDayState.Only">Show Only all day events</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>
        <div class="mt-1">
            <EventsTable Events="events" Categories="@Calendar.Categories" />
        </div>
    </MudStack>
</MudPaper>

@code {
    [Parameter, EditorRequired]
    public OutlookCalendar Calendar { get; set; } = default!;

    private OutlookCalendar? _calendar;
    private string? _filterString;
    private EventsTableData events = null!;
    private IEnumerable<string> _selectedCategories = Enumerable.Empty<string>();
    private MonthRange? _monthRange;
    private bool isExporting;
    private AllDayState _allDayState;

    private enum AllDayState
    {
        Show,
        Hide,
        Only
    }

    private AllDayState DayState
    {
        get => _allDayState;
        set
        {
            _allDayState = value;
            CalcEventsList();
        }
    }

    private string? FilterString
    {
        get => _filterString;
        set
        {
            _filterString = value;
            CalcEventsList();
        }
    }

    private MonthRange? MonthRange
    {
        get => _monthRange;
        set
        {
            _monthRange = value;
            CalcEventsList();
        }
    }

    private IEnumerable<string> SelectedCategories
    {
        get => _selectedCategories;
        set
        {
            _selectedCategories = value;
            CalcEventsList();
        }
    }

    protected override void OnParametersSet()
    {
        ThrowHelpers.ThrowIfRequiredPrameterNull(Calendar);

        if (Calendar != _calendar)
        {
            _selectedCategories = Calendar.Categories;
            _calendar = Calendar;
            _monthRange = null;
        }

        CalcEventsList();
    }

    private void CalcEventsList()
    {
        bool hideAllDayEvents = DayState == AllDayState.Hide;

        IEnumerable<Event> filteredEvents = Calendar.FilterEvents(_selectedCategories, _monthRange?.StartMonth, _monthRange?.EndMonth, FilterString, hideAllDayEvents)
        .OrderBy(static x => x.FullStartDateTime)
        .ThenBy(static x => x.StartTime);

        if (DayState == AllDayState.Only)
        {
            filteredEvents = filteredEvents.Where(e => e.AllDayEvent == true);
        }

        events = new(filteredEvents);
    }

    private async Task ExportCalendar()
    {
        isExporting = true;
        try
        {
            var dialogRef = Dialog.Show<ExportFileNameDialog>("");

            var res = await dialogRef.Result;

            if (res.TryGetSuccessfulResult(out string? fileName))
            {
                await Parse.ExportOutlookCalendar(Calendar, fileName);
            }
        }
        catch
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            Snackbar.Add($"There was an error when exporting the file", Severity.Error);
            throw;
        }
        finally
        {
            isExporting = false;
        }

    }

    private void OpenHelpDialog()
    {
        Dialog.Show<EventsTableHelpDialog>("Help");
    }


}
