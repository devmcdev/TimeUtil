@using TimeUtil.Components.TimeUntilCalculator
@using TimeUtil.Shared

<MudPaper Class="pa-3">
    <StyledText HtmlTag="h1" Typo="Typo.h6">
        Edit Events
    </StyledText>
    <MudStack Spacing="5">
        <MudStack Row="true">
            <MudTextField @bind-Value="@FilterString" Placeholder="Search Event Subject" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Clearable="true" />
            <CategoryMultiSelect @bind-SelectedCategories="SelectedCategories" Categories="Calendar.Categories" />
            <MonthRangePicker StartDate="@Calendar.FirstEventDate" EndDate="@Calendar.LastEventDate" @bind-MonthRange="@MonthRange" />
        </MudStack>
        <div class="mt-1">
            <EventsTable Events="events" />
        </div>
    </MudStack>
</MudPaper>

@code {
    [Parameter, EditorRequired]
    public OutlookCalendar Calendar { get; set; } = default!;

    private string? _filterString;
    private bool _shouldRender = true;
    private OutlookCalendar? _calendar;
    private EventsTableData events = null!;
    private IEnumerable<string> _selectedCategories = Enumerable.Empty<string>();
    private MonthRange? _monthRange;

    private string? FilterString
    {
        get => _filterString;
        set
        {
            _filterString = value;
            CalcEventsList();
        }
    }

    private MonthRange? MonthRange
    {
        get => _monthRange;
        set
        {
            _monthRange = value;
            CalcEventsList();
        }
    }

    private IEnumerable<string> SelectedCategories
    {
        get => _selectedCategories;
        set
        {
            _selectedCategories = value;
            CalcEventsList();
        }
    }

    private void CalcEventsList()
    {
        events = new(Calendar.FilterEvents(_selectedCategories, _monthRange?.StartMonth, _monthRange?.EndMonth, FilterString).OrderBy(static x => x.FullStartDateTime));
    }

    protected override void OnParametersSet()
    {
        ThrowHelpers.ThrowIfRequiredPrameterNull(Calendar);

        if (_calendar != Calendar)
        {
            _calendar = Calendar;
            _selectedCategories = Calendar.Categories.ToArray();
            CalcEventsList();
        }
        else
        {
            _shouldRender = false;
        }
    }

    protected override bool ShouldRender()
    {
        bool tempShouldRender = _shouldRender;

        _shouldRender = true;

        return tempShouldRender;
    }
}
