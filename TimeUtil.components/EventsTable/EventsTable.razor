@using TimeUtil.Shared
@using TimeUtil.Shared.Interfaces

@inject IDialogService DialogService

<MudSimpleTable Hover="true" Striped="true" Dense="true" Elevation="0" Outlined="true">
    <thead>
        <tr>
            <th>
                <MudCheckBox Size="Size.Small" Dense @bind-Checked:get="_selectAll" @bind-Checked:set="OnSelectedAllChanged" />
            </th>
            <th @onclick="()=>SetEventsOrder(sortByEventSubject)">
                <span class="mud-button-root mud-table-sort-label ">
                    Event Subject
                    <MudIcon Class="@($"mud-icon-root mud-svg-icon mud-icon-size-medium mud-table-sort-label-icon {SortArrow(sortByEventSubject)}")"
                             Icon="@Icons.Filled.ArrowUpward"
                             aria-hidden="true" focusable="false" />
                </span>
            </th>
            <th @onclick="()=>SetEventsOrder(sortByFullStartDateTime)">

                <span class="mud-button-root mud-table-sort-label ">
                    Start Date
                    <MudIcon Class="@($"mud-icon-root mud-svg-icon mud-icon-size-medium mud-table-sort-label-icon {SortArrow(sortByFullStartDateTime)}")"
                             Icon="@Icons.Filled.ArrowUpward"
                             aria-hidden="true" focusable="false" />
                </span>
            </th>
            <th @onclick="()=>SetEventsOrder(sortByFullEndDateTime)">

                <span class="mud-button-root mud-table-sort-label">
                    End Date
                    <MudIcon Class="@($"mud-icon-root mud-svg-icon mud-icon-size-medium mud-table-sort-label-icon {SortArrow(sortByFullEndDateTime)}")"
                             Icon="@Icons.Filled.ArrowUpward"
                             aria-hidden="true" focusable="false" />
                </span>
            </th>
            <th @onclick="()=>SetEventsOrder(sortByEventDuration)">
                <span class="mud-button-root mud-table-sort-label ">
                    Event Duration
                    <MudIcon Class="@($"mud-icon-root mud-svg-icon mud-icon-size-medium mud-table-sort-label-icon {SortArrow(sortByEventDuration)}")"
                             Icon="@Icons.Filled.ArrowUpward"
                             aria-hidden="true" focusable="false" />
                </span>
            </th>
            <th @onclick="()=>SetEventsOrder(sortByAllDayEvent)">
                <span class="mud-button-root mud-table-sort-label">
                    All Day
                    <MudIcon Class="@($"mud-icon-root mud-svg-icon mud-icon-size-medium mud-table-sort-label-icon {SortArrow(sortByAllDayEvent)}")"
                             Icon="@Icons.Filled.ArrowUpward"
                             aria-hidden="true" focusable="false" />
                </span>
            </th>
            <th>
                Event Categories
            </th>
            <th aria-hidden="true"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var row in _pageofEvents)
        {
            <tr @key="row">
                <td>
                    <MudCheckBox T="bool" Dense Size="Size.Small" @bind-Checked:get="SelectedEvents.Contains(row)" @bind-Checked:set="value => OnSelectedChanged(row,value)" />
                </td>
                <td>
                    @row.EventSubject
                </td>
                <td>
                    @row.FullStartDateTime
                </td>
                <td>
                    @row.FullEndDateTime
                </td>
                <td>
                    @row.Eventduration
                </td>
                <td>
                    @row.AllDayEvent
                </td>
                <td>
                    <ul>
                        @if (row.IsUncategorised)
                        {
                            <li @key="@("Uncategorised")">Uncategorised</li>
                        }
                        else
                        {
                            @foreach (string category in row.Categories)
                            {
                                <li @key="category">
                                    @category
                                </li>
                            }
                        }
                    </ul>
                </td>
                <td>
                    <MudIconButton Icon="@Icons.Filled.Edit" aria-label="edit" Size="@Size.Small" OnClick="() => OpenEditDialog(row)" />
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>
<MudBreakpointProvider>
    <MudHidden Invert="true" Breakpoint="Breakpoint.MdAndUp">
        <MudStack Row="true" Class="mt-3 align-center" Style="width:fit-content; margin-left:auto;" Spacing="3">
            <MudSelect T="int" Label="Rows per page" FullWidth="false" @bind-Value:get="_pageSize" @bind-Value:set="PageSizeChangedAsync">
                @foreach (int option in pageSizeOptions)
                {
                    <MudSelectItem Value="@option" />
                }
            </MudSelect>
            <div style="text-align:center;">
                <StyledText HtmlTag="span" Typo="Typo.body1">
                    @LowerBoundItem - @UpBoundItem of @_internalEvents.Length
                </StyledText>
            </div>
            <MudPagination @bind-Selected:get="_currentPage" @bind-Selected:set="CurrentPageChangedAsync" Count="_numberOfPages" BoundaryCount="0" Class="pa-4" MiddleCount="0" />
        </MudStack>
    </MudHidden>
    <MudHidden Invert="true" Breakpoint="Breakpoint.SmAndDown">
        <MudGrid Class="align-center mt-1" Justify="Justify.FlexEnd">
            <MudItem xs="12" sm="6">
                <MudSelect T="int" Label="Rows per page" FullWidth="false" @bind-Value:get="_pageSize" @bind-Value:set="PageSizeChangedAsync">
                    @foreach (int option in pageSizeOptions)
                    {
                        <MudSelectItem Value="@option" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" Style="text-align:center;">
                <StyledText HtmlTag="span" Typo="Typo.body1">
                    @LowerBoundItem - @UpBoundItem of @_internalEvents.Length
                </StyledText>
            </MudItem>
            <MudItem Class="align-end" xs="12">
                <MudPagination @bind-Selected:get="_currentPage" @bind-Selected:set="CurrentPageChangedAsync" Count="_numberOfPages" BoundaryCount="0" Class="pa-4" MiddleCount="0" />
            </MudItem>
        </MudGrid>
    </MudHidden>
</MudBreakpointProvider>



@code {
    [Parameter, EditorRequired] public EventsTableData Events { get; set; } = default!;
    [Parameter, EditorRequired] public IEnumerable<string> Categories { get; set; } = default!;
    [Parameter] public IReadOnlySet<Event> SelectedEvents { get; set; } = default!;
    [Parameter] public EventCallback<IReadOnlySet<Event>> SelectedEventsChanged { get; set; }

    private Event[] _internalEvents = Array.Empty<Event>();
    private Event[] _pageofEvents = Array.Empty<Event>();
    private static readonly int[] pageSizeOptions = new[] { 20, 40, 60, 80, 100 };
    private int _pageSize = pageSizeOptions[0];
    private int _numberOfPages;
    private bool _selectAll;
    private HashSet<Event> _selectedEvents = new HashSet<Event>();

    private static readonly Func<Event, object> sortByEventSubject = e => e.EventSubject!;
    private static readonly Func<Event, object> sortByFullStartDateTime = e => e.FullStartDateTime;
    private static readonly Func<Event, object> sortByFullEndDateTime = e => e.FullEndDateTime;
    private static readonly Func<Event, object> sortByEventDuration = e => e.Eventduration;
    private static readonly Func<Event, object> sortByAllDayEvent = e => e.AllDayEvent;

    private Func<Event, object> _currentSort = sortByFullStartDateTime;
    private SortDirection _currentSortDirection = SortDirection.Ascending;

    private int _currentPage = 1;

    private int LowerBoundItem => ((_currentPage - 1) * _pageSize) + 1;
    private int UpBoundItem => _pageofEvents.Length < _pageSize ? _internalEvents.Length : _pageofEvents.Length * _currentPage;

    protected override void OnParametersSet()
    {
        ThrowHelpers.ThrowIfRequiredPrameterNull(SelectedEvents);

        OrderEvents();
        _pageofEvents = GetPageOfEvents();
        _numberOfPages = GetNumberOfPages();
    }

    private Task PageSizeChangedAsync(int pageSize)
    {
        _pageSize = pageSize;
        _numberOfPages = GetNumberOfPages();
        _pageofEvents = GetPageOfEvents();

        return OnSelectedAllChanged(false);
    }

    private Task CurrentPageChangedAsync(int currentPage)
    {
        _currentPage = currentPage;
        _pageofEvents = GetPageOfEvents();

        return OnSelectedAllChanged(false);
    }

    private int GetNumberOfPages()
    {
        return (int)Math.Ceiling((double)_internalEvents.Length / _pageSize);
    }

    private Event[] GetPageOfEvents()
    {
        return _internalEvents.Skip((_currentPage - 1) * _pageSize).Take(_pageSize).ToArray();
    }

    private void SetEventsOrder(Func<Event, object> func)
    {
        SetSort(func);
        OrderEvents();
        _pageofEvents = GetPageOfEvents();
    }

    private void SetSort(Func<Event, object> func)
    {
        if (_currentSort == func)
        {
            _currentSortDirection = InvertSortDirection(_currentSortDirection);
        }
        else
        {
            _currentSortDirection = SortDirection.Ascending;
            _currentSort = func;
        }
    }

    private void OrderEvents()
    {
        _internalEvents = Events.Events.OrderByDirection(_currentSortDirection, _currentSort).ToArray();
    }

    private SortDirection InvertSortDirection(SortDirection sortDirection)
    {
        if (sortDirection == SortDirection.Ascending)
        {
            return SortDirection.Descending;
        }
        else
        {
            return SortDirection.Ascending;
        }
    }

    private string? SortArrow(Func<Event, object> func)
    {
        if (_currentSort != func)
        {
            return null;
        }
        else if (_currentSortDirection == SortDirection.Ascending)
        {
            return "mud-direction-asc";
        }
        else
        {
            return "mud-direction-desc";
        }
    }

    private Task OnSelectedChanged(Event @event, bool selected)
    {
        HashSet<Event> events = new(SelectedEvents);

        if (selected)
        {
            events.Add(@event);
        }
        else
        {
            events.Remove(@event);
        }

        return SelectedEventsChanged.InvokeAsync(events);
    }

    private Task OnSelectedAllChanged(bool selected)
    {
        _selectAll = selected;

        HashSet<Event> events = selected ? new(_pageofEvents) : new();

        return SelectedEventsChanged.InvokeAsync(events);
    }

    private async Task OpenEditDialog(Event eventToUpdate)
    {

        DialogParameters parameters = new()
        {
            { nameof(EditEventDialog.Event), eventToUpdate },
            { nameof(EditEventDialog.Categories), Categories }
        };

        var reference = DialogService.Show<EditEventDialog>("Simple Dialog", parameters);

        var res = await reference.Result;

        if (res.TryGetSuccessfulResult(out IEnumerable<string>? categories))
        {
            //eventToUpdate.UpdateEvent(categories.ToArray());
        }
    }
}
